<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用例设计</title>
      <link href="/2022/04/28/%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/04/28/%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p><a href="">黑盒测试</a>：不用关心底层代码逻辑的具体实现<br><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/1d51916ea34c43998438b178eb2b61f4.png" alt="在这里插入图片描述" style="zoom:33%;">最常见的黑盒测试用例设计方法有：<img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/636c6278fc87495c8f512b506f767ad4.png" alt="在这里插入图片描述"></p><p>黑盒测试用例设计：</p><h3 id="一、等价类划分法（✨重点）"><a href="#一、等价类划分法（✨重点）" class="headerlink" title="一、等价类划分法（✨重点）"></a>一、等价类划分法（✨重点）</h3><h4 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h4><ul><li>把程序的输入域划分为若干部分，然后从每个部分中选取少数代表性数据作为测试用例。</li><li>每一类的代表性数据在测试中的作用等价于这一类中的其他值，如果某一类中的一个例子发现了错误，这一等价类中的其他例子也能发现同样的错误</li><li>反之，如果某一类中的一个例子没有发现错误，这一类中的其他列子也不会查出错误</li></ul><h4 id="2、明确等价类划分法的原则（6条）"><a href="#2、明确等价类划分法的原则（6条）" class="headerlink" title="2、明确等价类划分法的原则（6条）"></a>2、明确等价类划分法的原则（6条）</h4><p>1️⃣在输入条件规定了取值范围或值的个数的情况下，可以确立一个有效等价类和两个无效等价类</p><ul><li><p>🌰：文本框可输入数据 6~18位      </p></li><li><p>在这个范围之内→  一个有效等价类  eg：10</p></li><li><p>在这个范围之外→  无效等价类   eg：4 、20</p></li></ul><p>2️⃣ 在输入条件规定了输入值的集合或者规定了”必须如何”的条件的情况下，可以确立一个有效等价类和一个无效等价类</p><ul><li>🌰 ：请输入手机号11位，必须为11位</li><li>有效等价类→11位数据</li><li>无效等价类→非11位数据</li></ul><p>3️⃣ 在输入条件是一个布尔量的情况下，可确定一个有效等价类和一个无效等价类，“真”就是有效，“假”就是无效       </p><ul><li>🌰：方框内选取：阅读并接受《百度用户协议》及《百度隐私权保护声明》</li><li>打勾为有效，不打勾为无效</li></ul><p>4️⃣ 在规定了输入数据的一组值（假定n个），并且程序要对每一个输入值分别处理的情况下，可确立n个有效等价类和一个无效等价类<br>5️⃣ 在规定了输入数据必须遵循的规则的情况下，可确立一个有效等价类（符合规则）和若干个无效等价类(从不同角度违反规则)</p><p>​     </p><ul><li>🌰：用户名要求6-18位，由字母、数字、下划线组成</li><li>此时无效等价类可以有若干个</li></ul><p>6️⃣ 在划分的等价类中，各元素在程序处理中的方式不同的情况下，则应在该等价类基础上进一步划分为更小的等价类就（由大化小）</p><p>⚡注意事项</p><p>==注意：测试用例不允许重复、不能缺失，越详细越好==</p><p><strong>不允许这样设计</strong>：</p><ul><li>🌰：61012219990230204X → 存在错误。因为2月只有28或者29天</li></ul><p>身份证最后一位是校验码，0-9和X（10）</p><p><code>（一条用例只能违反一个规则）</code></p><p>【身份证号：18位，倒数第二位代表性别 （偶数→女生、奇数→男生）】</p><h4 id="3-实例🌰："><a href="#3-实例🌰：" class="headerlink" title="3.实例🌰："></a>3.实例🌰：</h4><p>百度注册页面用例设计（用户名:中英文均可，最长14个英文或7个汉字）</p><table><thead><tr><th>有效等价类</th><th>数据</th><th>无效等价类</th><th>数据</th></tr></thead><tbody><tr><td>中英文混合</td><td>心min月</td><td>数字和特殊符号</td><td>123&amp;%</td></tr><tr><td>14个英文</td><td>xinminyue</td><td>超过14位</td><td>xinminyuexinminyue</td></tr><tr><td>7个中文</td><td>心皿月</td><td>超过7个</td><td>心皿月心皿月心皿月</td></tr><tr><td>不能为空</td><td>心皿月</td><td>空</td><td></td></tr><tr><td>不能重复</td><td>皿月</td><td>用户名重复（已经注册过）</td><td>心皿月</td></tr></tbody></table><h3 id="二、边界值分析法（✨重点）"><a href="#二、边界值分析法（✨重点）" class="headerlink" title="二、边界值分析法（✨重点）"></a>二、边界值分析法（✨重点）</h3><p>边界值是一个特定的数据。<br>例如，文本框需要输入6—18位字符，那么此时边界值为：6个字符、18个字符。<br>次边界：边界附近的值，按照系统规定的单位或计算方式，一般是一个数据的差异。</p><h4 id="1、边界值的选择原则"><a href="#1、边界值的选择原则" class="headerlink" title="1、边界值的选择原则"></a>1、边界值的选择原则</h4><ul><li>如果输入条件<strong>规定了值的范围</strong>，则应取刚达到这个范围的边界值，以及刚刚超越这个范围边界的值作为测试的输入数据</li><li>如果输入条件<strong>规定了值的个数</strong>，则用最大个数，最小个数，比最小个数少1，比最大个数多1的数作为测试数据</li><li>如果程序的规格说明给出的输入域或输出域是有序集合，则应选取集合的<strong>第一个元素</strong>和<strong>最后一个元素</strong>作为测试用例。</li><li>如果程序中使用了一个内部数据结构，则应当选择这个内部数据结构边界上的值作为测试用例。</li></ul><p>📑思考题：</p><p>（1）6≤X≤12，请问测试中x的边界值要选取哪几个进行测试？</p><pre><code> `\5.  6 .  7.   11,12,13    【边界值加减1】`</code></pre><p>（2）6&lt;X&lt;12，请问测试中x的边界值要选取哪几个进行测试？</p><p>​    <code>此时的6和12是无效数据，应当做无效数据进行测试、     </code></p><p>​    <code>6  7  8      10,11,12 【边界值加减1】</code></p><p>（3）文本框输入字符的个数要求是不大于150字，测试时如何选择边界值。</p><p>​     <code>0≤x≤150     测： 空，1， 149,150,151</code></p><h3 id="三、因果图法"><a href="#三、因果图法" class="headerlink" title="三、因果图法"></a>三、因果图法</h3><h4 id="1-什么是因果图法"><a href="#1-什么是因果图法" class="headerlink" title="1.什么是因果图法"></a>1.什么是因果图法</h4><ul><li>因果图是利用一种图解法分析输入的各种组合情况，从而设计测试用例的方法，</li><li>它适用于检查程序条件的各种组合情况，</li><li>适用于输入条件之间有相互制约、相互依赖的情况，</li></ul><p>特点：- 考虑输入条件相互制约及组合关系。–考虑输出条件对输入条件的依赖关系</p><p>因果图法要注意考虑：</p><ul><li><p>所有的输入输出条件的相互制约关系以及组合关系</p></li><li><p>输出结果对输入条件的依赖关系。也就是什么样的输入组合会产生怎样的输出结果，即“因果关系”</p></li></ul><p>🌰：注册QQ<br><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/02c39a5bc7ec42d6adaf45a1de4a87a0.png" title="" alt="在这里插入图片描述" data-align="center"></p><h4 id="2-因果图"><a href="#2-因果图" class="headerlink" title="2.因果图"></a>2.因果图</h4><p>第1️⃣步：根据功能说明书中规定的<strong>原因和结果之间的关系</strong>画出因果图<br><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/f645f9835c174d838282c2f6744038ad.png" title="" alt="在这里插入图片描述" data-align="center"></p><p>恒等关系：原因a成立，结果b一定成立<br>非：原因a成立，原因b一定不成立<br>或：原因a,b,c三者只要有一个成立，结果d就成立<br>与：原因a,b,c都成立时，结果d才成立</p><p>第2️⃣步：根据功能说明在因果图中加上约束条件<br><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/ef90a5b3ca0d47a9baa84a6e9a9936b4.png" title="" alt="在这里插入图片描述" data-align="center"></p><ul><li>🌟其中互斥，包含，唯一，要求是对原因的约束，屏蔽是对结果的约束。</li></ul><p>互斥(exclusion)：表示不同时为1。即a,b,c中<strong>至多</strong>只有一个1<br>包含(include)：表示<strong>至少</strong>有一个1。即a,b,c中不同时为0<br>唯一(only)：表示a,b,c中<strong>有且仅有一个</strong>1<br>要求(request): 表示若a = 1,则b必须为1，即不可能a=1且b=0<br>屏蔽(mask)：表示若a=1,则b必须为0</p><h4 id="3-实例🌰"><a href="#3-实例🌰" class="headerlink" title="3.实例🌰"></a>3.实例🌰</h4><p>阅读和分析功能说明书，识别出”原因”和”结果”，并加以编号<br>案例：有一个饮料自动售货机（处理单价为5角钱）的控制处理软件，它的软件规格说明书如下。<br>※ 若投入5角钱的硬币，按下”橙汁”或者”啤酒”的按钮，则相应的饮料就送出来。<br>※ 若投入1元钱的硬币，同样也是按”橙汁”或”啤酒”的按钮，则自动售货机在送出相应的饮料的同时退回5角钱的硬币。</p><p>第1步：先分析原因和结果的关系，画出他们之间的关系图（部分关系连线）；按照需求描述原因、结果间的约束。<br><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/a0f2f49f738f43ffb618aa4b34f12d89.png" alt="在这里插入图片描述">第2步：列出所有原因和结果的列表，设计初步的测试用例步骤。（列表中的每一列都是一条测试用例）<br><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/667c891ae63b40769b6acdfc533307ef.png" alt="在这里插入图片描述">通过分析发现：<br>1）只选择饮料，没有投币的时候，软件没有任何结果<br>2)只投币，没有选择饮料的时候，软件也没有任何结果<br>==我们不能把软件的缺陷，设计成测试用例==<br>因果图的<strong>优势</strong>在于能够发现测试用例设计中存在的不足。</p><p>这里就简单的写上两条测试用例：<br><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/420f00b7dc35466e9c2d6970497c6cd9.png" alt="在这里插入图片描述"></p><h4 id="4-缺陷"><a href="#4-缺陷" class="headerlink" title="4.缺陷"></a>4.缺陷</h4><p>当原因和结果比较多时，他们之间的关系连线就会较多，导致因果图的可读性差。<br>因此适用于局部的小功能分析，原因结果关系不是很多的情况使用。</p><h3 id="四、判定表驱动法"><a href="#四、判定表驱动法" class="headerlink" title="四、判定表驱动法"></a>四、判定表驱动法</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><p>判定表法是分析和表达多逻辑条件下执行不同操作的情况的工具，它由以下几个内容组成：</p><ul><li>条件桩: 列出了问题的所有条件，通常认为<strong>列出的条件的次序无关紧要</strong>。</li><li>动作桩： 列出了问题规定可能采取的操作，<strong>这些操作的排列顺序没有约束</strong>。</li><li>条件项：列出针对它左列条件的取值，在所有可能情况下的真假值。</li><li>动作项:列出在条件项的各种取值情况下应该采取的动作。</li></ul><h4 id="2-使用场合和条件"><a href="#2-使用场合和条件" class="headerlink" title="2.使用场合和条件"></a>2.使用场合和条件</h4><p><strong>使用场合：</strong><br>主要适用于多条件的内容组合和条件分析。<br><strong>使用条件：</strong><br>所有的条件桩在表中的顺序和位置互不影响；<br>所有的动作桩内的顺序不会因为条件的顺序变化，而产生不同。</p><h4 id="3-实现步骤"><a href="#3-实现步骤" class="headerlink" title="3.实现步骤"></a>3.实现步骤</h4><ul><li>识别出操作条件（原因），和对应的动作（结果）</li><li>分析条件的条件项（组合数量）：如果有n个条件，每个条件有成立和不成立两种情况，那么最后一共会有2^n个组合数量</li><li>简化和优化结果，排除一些不可能存在的情况</li></ul><h4 id="4-实例🌰"><a href="#4-实例🌰" class="headerlink" title="4.实例🌰"></a>4.实例🌰</h4><p>问题要求：”……对功率大于50马力的机器、维修记录不全或已运行10年以上的机器，应给予优先的维修处理……” 。这里假定，“维修记录不全”和“优先维修处理”均已在别处有更严格的定义 。请建立判定表。</p><p>解答：</p><ol><li><p>确定规则的个数：这里有3个条件，每个条件有两个取值，故应有2<em>2</em>2=8种规则。</p></li><li><p>列出所有的条件茬和动作桩</p></li><li><p>填入条件项。可从最后1行条件项开始，逐行向上填满。如第三行是： Y N Y N Y N Y N，第二行是： Y Y N N Y Y N N等等。 </p></li><li><p>填入动作桩和动作顶。这样便得到形如图的初始判定表。</p></li></ol><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220428114402299.png" alt="image-20220428114402299"></p><p>​                                          初始判定表</p><ol start="5"><li>化简，合并相似规则后得到图。</li></ol><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220428114452721.png" alt="image-20220428114452721"></p><p>原文：<a href="https://www.cnblogs.com/lci05/p/3918346.html">转：lci05 - 博客园</a></p><h4 id="5-适合使用判定表设计测试用例的条件："><a href="#5-适合使用判定表设计测试用例的条件：" class="headerlink" title="5.适合使用判定表设计测试用例的条件："></a>5.适合使用判定表设计测试用例的条件：</h4><p>规格说明以判定表的形式给出，或很容易转换成判定表<br>条件的排列顺序不影响执行哪些操作<br>规则的排列顺序不影响执行哪些操作<br>当某一规则的条件已经满足，并确定要执行的操作后，不必检验别的规则<br>如果某一规则要执行多个操作，这些操作的执行顺序无关紧要</p><h4 id="6-优点"><a href="#6-优点" class="headerlink" title="6.优点"></a>6.优点</h4><p>能够将复杂的问题按照各种可能的情况全部列举出来，简明并且可以避免遗漏。</p><h3 id="五、正交实验法"><a href="#五、正交实验法" class="headerlink" title="五、正交实验法"></a>五、正交实验法</h3><p>正交试验设计法是从大量的试验点中挑选出适量的、有代表性的点来进行测试，是研究多因素，多水平的一种设计方法。</p><p>这些代表性的点具有“均匀分散、齐整可比”的特点。</p><p>在一项试验中，把影响试验结果的量称为试验（因素）因子，简称<strong>因素</strong>。在试验过程中，每一个因素可以处于不同的状态或状况，把因素所处的状态或状况，称为因素的水平，简称<strong>水平</strong>。</p><p>正交试验分析法包括以下常用术语：<br>（1）指标：通常把判断试验结果优劣的标准叫做试验的指标<br>（2）因子：是指所有影响试验指标的条件<br>（3）因子的状态：是指影响试验因子的因素，也称之为因子的水平<br>正交表的表示形式：Lr（mn）<br>（1）n表示因子数，正交表中列的个数<br>（2）m表示水平数，也称为状态，单个因子能取得的值最大个数<br>（3）r表示行数，正交表中行的数量，也是测试用例的个数</p><h4 id="正交表的种类"><a href="#正交表的种类" class="headerlink" title="正交表的种类"></a>正交表的种类</h4><ul><li>各列水平数均相同的正交表：行数r=(m-1)*n+1，这是等水平正交表如L4(23)，代表测试用例4=(2-1)*3+1</li><li>混合水平正交表，对于非等水平的正交表，表示形式为Lr(mn,pq)，行数r=(m-1)*n+(p-1)*q+1</li></ul><h4 id="正交实现步骤"><a href="#正交实现步骤" class="headerlink" title="正交实现步骤"></a>正交实现步骤</h4><p>1、确定因素：这里的因素是指对软件运行结果有影响的原因（分析所有对结果有影响的因素）</p><ul><li><p>确定因素的取值范围或集合（该步是为步骤3做准备的）</p></li><li><p>因素的取值范围是指软件输入的取值范围或集合以及可用的硬件资源</p></li></ul><p>2、确定每个因素的水平</p><ul><li><p>根据因素的取值范围或集合，采用等价类划分、边界值分析以及其他软件测试技术，在每个因素的取值范围或集合内挑选出有效等价类、无效等价类、正好等于、刚刚大于或刚刚小于边界值等有代表性的测试值</p></li><li><p><strong>加权筛选，生成因素分析表</strong></p><p>计算各因子和状态的权值，删去一部分权值较小，即重要性较小的因子或状态，使最后生成的测试用例集缩减到允许范围。</p><p>该步骤目的是要明确哪些输入和输入的取值是最需要进行组合的，这样可以压缩最后测试的组合数。</p></li></ul><p>3、选择正交表（只有特定的因素数和水平数的组合才有对应的正交表，正交表的因素数和水平数一般要大于实际的因素数和水平数）</p><ul><li><p>根据确定的因素和水平，选择合适的正交表</p></li><li><p>如果没有合适的正交表可用或需要的测试用例个数太多，要对因素和水平进行调整</p></li></ul><p>正交试验法的关键在于正交表的选取，可以按照以下原则进行选取：</p><p>1、如果不同因子的状态数相同，比如有M个因子，每个因子N个状态，则最好选取M因子N状态的正交表，如果该正交表不存在，则逐步增加因子数，直到找到一个存在的正交表。</p><p>2、如果不同因子的状态数不同，则先要确定正交表的状态数，确定的原则是看哪种状态数在各个因子中出现的最多，比如现在有4个因子，第1、2个因子有3状态，第3个因子有4状态，第4个因子有2状态，则由于状态数3出现次数最多，因此应该选择状态数为3的正交表。如果刚才说到的4个因子中第3个因子的状态数也是2，则出现状态数2、3均出现2次的情况，这种情况下应尽可能选择较大的值，也就是应该选3。正交表的状态数确定好了，下面就要确定正交表的因子数，这和不同因子的状态数相同的情况是类似的</p><p>选择好正交表后需要将实际的因子和状态带入正交表，这个时候会出现：</p><ol><li><p>因子的状态数=正交表的状态数 这个时候直接替换即可。</p></li><li><p>因子的状态数&gt;正交表的状态数 这个时候需要先将多余的状态合并，带入正交表，然后展开即可。具体可看后面的案例2。</p></li><li><p>因子的状态数&lt;正交表的状态数 这个时候正交表中多出来的状态，用实际状态的任意值任意替换即可。</p></li></ol><h3 id="六、场景法"><a href="#六、场景法" class="headerlink" title="六、场景法"></a>六、场景法</h3><h4 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h4><p>现在的软件几乎都是用事件触发控制流程的。测试时，可以生动地描绘出时间触发时的情景，有利于设计测试用例，同时使测试用例更容易理解和执行。</p><h4 id="2-基本流、备选流"><a href="#2-基本流、备选流" class="headerlink" title="2.基本流、备选流"></a>2.基本流、备选流</h4><p>基本流：软件功能按照正确的事件流实现的一条正确流程。<strong>通常一个业务仅存在一个基本流，且基本流仅有一个起点和一个终点。</strong><br>备选流：除了基本流之外的各支流，包含多种不同的情况。<br><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/a0336b8dc47a431ba04f5d2f4f9dc815.png" alt="在这里插入图片描述"></p><h4 id="3-设计用例步骤"><a href="#3-设计用例步骤" class="headerlink" title="3.设计用例步骤"></a>3.设计用例步骤</h4><ul><li>根据说明，描述出程序的基本流及各项备选流</li><li>根据基本流和各项备选流生成不同的场景</li><li>对每一个场景生成相应的测试用例</li><li>对生成的所有测试用例重新复审，去掉多余的测试用例</li><li>测试用例确定后，对每一个测试用例确定测试数据值</li></ul><h4 id="4-适用场景"><a href="#4-适用场景" class="headerlink" title="4.适用场景"></a>4.适用场景</h4><p>用于解决业务流程清晰的系统或功能</p><h4 id="5-实例🌰"><a href="#5-实例🌰" class="headerlink" title="5.实例🌰"></a>5.实例🌰</h4><p>ATM机取款流程<br>（1）基本流：<br><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/13ada5ef3ef94b559bd5c772f28c3bc7.png" alt="在这里插入图片描述">（2）包含了备选流的过程<br><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/22054a2182ac4bd0818f74dff5bacda9.png" alt="在这里插入图片描述"></p><p>备选流：</p><blockquote><p>1 卡片不是银行卡<br>2 卡片不是银联的卡<br>3 密码输错一次<br>4 密码输错两次，第三次输入正确<br>5 密码输错三次，冻结账号或者吞卡<br>6 选择存款服务<br>7 选择查询服务<br>8 选择转账服务<br>9 选择修改密码服务<br>10 选择取款服务<br>11 账户取款金额达到取款机的当日取款上限</p></blockquote><p>场景设计：</p><blockquote><p>场景1： 基本流<br>场景2: 基本流 备选流5<br>场景3： 基本流 备选流4<br>场景4： 基本流 备选流1<br>场景5： 基本流 备选流2 备选流4</p></blockquote><p>设计测试用例：<br><strong>每一个场景都是一个测试用例</strong><br>以场景5为例：设计步骤</p><blockquote><p>1、插卡（先用学生卡）<br>2、换卡（银联卡），在进行插卡<br>3、输入密码（第一次输入错误）<br>4、再次输入密码（第二次输入错误）<br>5、第三次输入密码（输入正确）<br>6、选择服务——取款<br>7、选择取款金额——500<br>8、等待出钞<br>9、取卡</p></blockquote><h3 id="七、测试用例设计综合策略"><a href="#七、测试用例设计综合策略" class="headerlink" title="七、测试用例设计综合策略"></a>七、测试用例设计综合策略</h3><p>使用各种测试方法的综合策略：</p><ol><li><p>在任何情况下都必须使用边界值分析方法，经验表明用这种方法设计出测试用例发现程序错误的能力最强。】</p></li><li><p>必要时用等价类划分方法补充一些测试用例。</p></li><li><p>用错误推测法再追加一些测试用例。</p></li><li><p>对照程序逻辑，检查已设计出的测试用例的逻辑覆盖程度，如果没有达到要求的覆盖标准，应当再补充足够的测试用例。</p></li><li><p>如果程序的功能说明中含有输入条件的组合情况，则一开始就可选用因果图法。</p></li></ol><p>原文链接：<a href="https://blog.csdn.net/qq_49129184/article/details/123825090">https://blog.csdn.net/qq_49129184/article/details/123825090</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用例设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装MySQL远程连接（阿里云服务器）</title>
      <link href="/2022/04/22/docker%E5%AE%89%E8%A3%85MySQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%EF%BC%88%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/"/>
      <url>/2022/04/22/docker%E5%AE%89%E8%A3%85MySQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%EF%BC%88%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>1、docker创建并启动mysql容器</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell">root@iZ2ze4xuhkt8y4ejlnuo1lZ:/ # docker run -itd \<br>-p 3306:3306  \<br>--name=mysql \<br>-v /root/mysql/conf:/etc/mysql/conf.d  \<br>-v /root/mysql/logs:/logs \<br>-v /root/mysql/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>mysql:5.7<br></code></pre></td></tr></tbody></table></figure><ul><li>p 3306:3306   制定端口</li><li>-v /root/mysql/conf:/etc/mysql/conf.d 将容器中/etc/mysql/conf.d挂载到宿主机/root/mysql/conf.d</li><li>e MYSQL_ROOT_PASSWORD=123456  初始化root用户的密码</li></ul><p>2、查看进入容器</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell">root@iZ2ze4xuhkt8y4ejlnuo1lZ:~ # docker ps<br>CONTAINER ID   IMAGE       COMMAND                  CREATED             STATUS         PORTS                                                  NAMES<br>1f77b8a5078b   mysql:5.7   "docker-entrypoint.s…"   About an hour ago   Up 9 minutes   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql<br>root@iZ2ze4xuhkt8y4ejlnuo1lZ:~ #<br>root@iZ2ze4xuhkt8y4ejlnuo1lZ:~ # docker exec -it mysql bash<br><br></code></pre></td></tr></tbody></table></figure><p>3、登录mysql开启远程访问</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell">root@1f77b8a5078b:/# mysql -uroot -p123456<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">ALTER user <span class="hljs-string">'root'</span>@<span class="hljs-string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">'123456'</span>;</span>  <br>Query OK, 0 rows affected (0.00 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"></span><br><span class="language-bash">mysql&gt; FLUSH PRIVILEGES;</span>  <br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></tbody></table></figure><p>4、开启服务器端口</p><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220422214651545.png" alt="image-20220422214651545"></p><p>5、本地连接</p><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220422214903939.png" alt="image-20220422214903939"></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP/IP协议以及三次握手、四次挥手</title>
      <link href="/2022/04/21/TCP-IP%E5%8D%8F%E8%AE%AE%E4%BB%A5%E5%8F%8A%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E3%80%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2022/04/21/TCP-IP%E5%8D%8F%E8%AE%AE%E4%BB%A5%E5%8F%8A%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E3%80%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1、osi七层模型"><a href="#1、osi七层模型" class="headerlink" title="1、osi七层模型"></a>1、osi七层模型</h2><p>计算机网络结构采用分层思想，每层完成一部分子功能，每层在完成相应功能时与另一个通信实体的相同层按照某种协议进行信息交换。这种所划分的层次和各层协议的集合就是计算机网络结构</p><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220111230449457.png" alt="osi七层模型"></p><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220111232217202.png" alt="image-20220111232217202"></p><h2 id="2、tcp-x2F-ip模型"><a href="#2、tcp-x2F-ip模型" class="headerlink" title="2、tcp/ip模型"></a>2、tcp/ip模型</h2><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220111233034983.png" alt="image-20220111233034983"></p><p>常见协议以及设备</p><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220111232055697.png" alt="image-20220111232055697"></p><h2 id="3、数据封装-解封装过程"><a href="#3、数据封装-解封装过程" class="headerlink" title="3、数据封装-解封装过程"></a>3、数据封装-解封装过程</h2><h3 id="封装过程"><a href="#封装过程" class="headerlink" title="封装过程"></a>封装过程</h3><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220421101930853.png" alt="image-20220421101930853"></p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220421102508060.png" alt="image-20220421102508060" style="zoom:50%;"><p>1、在应用层，上层数据被转换成二进制数据<br>2、传输层将二进制数据被分割成小的数据段，并封装TCP头部 ：TCP头部的关键信息–端口号（数据类型为数据段）</p><p>3、网络层将传输层传来的数据被封装上IP头部 ：IP头部的关键信息–IP地址（数据类型为数据包）</p><p>4、数据链路层将网络层传来的数据被封装上MAC头部：MAC头部的关键信息–MAC地址 （数据类型为数据帧）<br>5、物理层将二进制数据组成的比特流转化为电信号在网络中传输 （比特流)。</p><h3 id="解封装过程"><a href="#解封装过程" class="headerlink" title="解封装过程"></a>解封装过程</h3><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220421103055635.png" alt="image-20220421103055635"></p><p>1、物理层：将电信号转化为二进制数据，并将其送至数据链路层<br>2、数据链路层：查看MAC地址，地址是自己，就拆掉MAC头部，继续传输（地址不是自己就丢弃数据）<br>3、网络层：查看IP地址，地址是自己，就拆掉IP头部，继续传输（地址不是自己就丢弃数据）<br>4、传输层：查看TCP头部，判断应该传到哪里，然后重组数据，传输到应用层<br>5、应用层：二进制转化为原始数据</p><h2 id="4、tcp报文"><a href="#4、tcp报文" class="headerlink" title="4、tcp报文"></a>4、tcp报文</h2><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220421103949098.png" alt="image-20220421103949098"></p><p>解读：</p><p><strong>端口号字段</strong></p><p>TCP源端口(Source Port): 源计算机上的应用程序的端口号，占 16 位<br>TCP目的端口(Destination Port): 目标计算机的应用程序端口号，占 16 位</p><p><strong>序列号</strong><br>CP序列号(Sequence Number): 占 32 位；它表示本报文段所发送数据的第一个字节的编号。在 TCP 连接中，所传送的字节流的每一个字节都会按顺序编号。当SYN标记不为1时，这是当前数据分段第一个字母的序列号；如果SYN的值是1时，这个字段的值就是初始序列值（ISN），用于对序列号进行同步。这时，第一个字节的序列号比这个字段的值大1，也就是ISN加1。<br><strong>确认号字段</strong><br>TCP 确认号（Acknowledgment Number，ACK Number）：占 32 位。它表示接收方期望收到发送方下一个报文段的第一个字节数据的编号。其值是接收计算机即将接收到的下一个序列号，也就是下一个接收到的字节的序列号加1。</p><p><strong>数据偏移字段</strong><br>TCP 首部长度（Header Length）：数据偏移是指数据段中的“数据”部分起始处距离 TCP 数据段起始处的字节偏移量，占 4 位。其实这里的“数据偏移”也是在确定 TCP 数据段头部分的长度，告诉接收端的应用程序，数据从何处开始。</p><p><strong>保留字段</strong><br>保留(Reserved): 占 4 位；为 TCP 将来的发展预留空间，目前必须全部为 0</p><p><strong>标志位字段🔺</strong></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>URG</td><td>表示本报文段中发送的数据是否包含紧急数据：URG=1 时表示有紧急数据。当 URG=1 时，后面的紧急指针字段才有效</td></tr><tr><td>ACK</td><td>表示前面的确认号字段是否有效：ACK=1 时表示有效；只有当 ACK=1 时，前面的确认号字段才有效；TCP 规定，连接建立后，ACK 必须为 1</td></tr><tr><td>PSH</td><td>告诉对方收到该报文段后是否立即把数据推送给上层。如果值为 1，表示应当立即把数据提交给上层，而不是缓存起来</td></tr><tr><td>RST</td><td>表示是否重置连接：若 RST=1，说明 TCP 连接出现了严重错误（如主机崩溃），必须释放连接，然后再重新建立连接</td></tr><tr><td>SYN</td><td>在建立连接时使用，用来同步序号：当 SYN=1，ACK=0 时，表示这是一个请求建立连接的报文段；当 SYN=1，ACK=1 时，表示对方同意建立连接；SYN=1 时，说明这是一个请求建立连接或同意建立连接的报文；只有在前两次握手中 SYN 才为 1</td></tr><tr><td>FIN</td><td>标记数据是否发送完毕：若 FIN=1，表示数据已经发送完成，可以释放连接</td></tr></tbody></table><p><strong>窗口大小字段</strong><br>窗口大小(Window Size): 占 16 位；它表示从 Ack Number 开始还可以接收多少字节的数据量，也表示当前接收端的接收窗口还有多少剩余空间。该字段可以用于 TCP 的流量控制。</p><p><strong>校验和字段</strong><br>校验位(TCP Checksum): 占 16 位；它用于确认传输的数据是否有损坏。发送端基于数据内容校验生成一个数值，接收端根据接收的数据校验生成一个值。两个值必须相同，才能证明数据是有效的。如果两个值不同，则丢掉这个数据包。Checksum 是根据伪头 + TCP 头 + TCP 数据三部分进行计算的。</p><p><strong>紧急指针字段</strong><br>紧急指针(Urgent Pointer): 仅当前面的 URG 控制位为 1 时才有意义。它指出本数据段中为紧急数据的字节数，占 16 位；当所有紧急数据处理完后，TCP 就会告诉应用程序恢复到正常操作。即使当前窗口大小为 0，也是可以发送紧急数据的，因为紧急数据无须缓存。</p><p><strong>可选项字段</strong><br>选项(Option): 长度不定，但长度必须是 32bits 的整数倍；选项中的内容不确定，因此就必须使用首部长度来区分选项具体的长度</p><p>原文链接：<a href="https://blog.csdn.net/m0_47988201/article/details/122286350">https://blog.csdn.net/m0_47988201/article/details/122286350</a></p><h2 id="5、三次握手（建立连接）"><a href="#5、三次握手（建立连接）" class="headerlink" title="5、三次握手（建立连接）"></a>5、三次握手（建立连接）</h2><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220115174640860.png" alt="image-20220115174640860"></p><ul><li>第一次：客户端发送初始序号x和syn=1请求标志</li><li>第二次：服务器发送请求标志syn，发送确认标志ACK，发送自己的序号seq=y，发送客户端的确认序号ack=x+1</li><li>第三次：客户端发送ACK确认号，发送自己的序号seq=x+1，发送对方的确认号ack=y+1</li></ul><p>总结：</p><ul><li>第一次：客户端发送请求到服务器，服务器知道客户端发送，自己接收正常。SYN=1,seq=x</li><li>第二次：服务器发给客户端，客户端知道自己发送、接收正常，服务器接收、发送正常。ACK=1,ack=x+1,SYN=1,seq=y</li><li>第三次：客户端发给服务器：服务器知道客户端发送，接收正常，自己接收，发送也正常.seq=x+1,ACK=1,ack=y+1</li></ul><blockquote><p> 为什么不是二次握手而是三次握手？</p></blockquote><p>上面分析过程可以看出，握手两次达不到让双方都得出自己、对方的接收、发送能力都正常的结论的；3次握手完成两个重要的功能，<code>既要双方做好发送数据的准备工作(双方都知道彼此已准备好)</code>，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。</p><p>换一种说法：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用三次握手，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用三次握手的办法可以防止上述现象发生</p><h2 id="6、四次挥手（断开连接）"><a href="#6、四次挥手（断开连接）" class="headerlink" title="6、四次挥手（断开连接）"></a>6、四次挥手（断开连接）</h2><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220115180828466.png" alt="image-20220115180828466"></p><ul><li>第一次挥手：客户端发出释放FIN=1，自己序列号seq=u，进入FIN-WAIT-1状态</li><li>第二次挥手：服务器收到客户端的后，发出ACK=1确认标志和客户端的确认号ack=u+1，自己的序列号seq=v，进入CLOSE-WAIT状态</li><li>第三次挥手：客户端收到服务器确认结果后，进入FIN-WAIT-2状态。此时服务器发送释放FIN=1信号，确认标志ACK=1，确认序号ack=u+1，自己序号seq=w，服务器进入LAST-ACK（最后确认态）</li><li>第四次挥手：客户端收到回复后，发送确认ACK=1，ack=w+1，自己的seq=u+1，客户端进入TIME-WAIT（时间等待）。客户端经过2个最长报文段寿命后，客户端CLOSE；服务器收到确认后，立刻进入CLOSE状态。</li></ul><p>分析：</p><ul><li>第一次：客户端请求断开FIN,seq=u</li><li>第二次：服务器确认客户端的断开请求ACK,ack=u+1,seq=v</li><li>第三次：服务器请求断开FIN,seq=w,ACK,ack=u+1</li><li>第四次：客户端确认服务器的断开ACK,ack=w+1,seq=u+1</li></ul><p>一个方向的断开，只是说明该方向数据已传输完毕，而另一个方向或许还有数据，所以得等到另一个方向数据也全部传输完成后，才能执行第三次挥手。</p><p>此篇笔记结合他人博客内容，感谢：</p><p>CSDN博主「一朵花花」原文链接：<a href="https://blog.csdn.net/m0_47988201/article/details/122286350">https://blog.csdn.net/m0_47988201/article/details/122286350</a></p><p>知乎作者[nickcau]：<a href="https://link.zhihu.com/?target=http://www.imooc.com/article/266145">https://link.zhihu.com/?target=http%3A//www.imooc.com/article/266145</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpstudy启动mysql成功后停止</title>
      <link href="/2022/04/19/phpstudy%E5%90%AF%E5%8A%A8mysql%E6%88%90%E5%8A%9F%E5%90%8E%E5%81%9C%E6%AD%A2/"/>
      <url>/2022/04/19/phpstudy%E5%90%AF%E5%8A%A8mysql%E6%88%90%E5%8A%9F%E5%90%8E%E5%81%9C%E6%AD%A2/</url>
      
        <content type="html"><![CDATA[<p>今天用phpstudy启动mysql时遇到问题，启动成功后又自动停止，查看日志发现只有一个警告：</p><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220419173712729.png" alt="image-20220419173712729"></p><p>这是因为之前安装的mysql服务没有删除干净，我的电脑服务里面还存在mysql服务，解决办法：管理员启动cmd输入<code>sc delete mysql</code>：</p><p><img src="https://typora-img-dai.oss-cn-hangzhou.aliyuncs.com/typora-img/image-20220419173930670.png" alt="image-20220419173930670"></p><p>phpstudy再次启动mysql成功…</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> phpstudy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2022/04/16/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/04/16/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-操作目录cd"><a href="#1-操作目录cd" class="headerlink" title="1.操作目录cd"></a>1.操作目录cd</h2><p>cd：切换目录</p><p>cd /   #进入到系统根目录</p><p>cd .   #进入到当前目录</p><p>cd ..  #返回上层目录</p><p>cd  /tmp  #进入指定目录/tmp</p><p>cd ~  #进入当前用户的家目录</p><h2 id="2-查看文件ls"><a href="#2-查看文件ls" class="headerlink" title="2.查看文件ls"></a>2.查看文件ls</h2><p>ls：列出当前目录的所有文件、文件夹（目录）信息；</p><p>-l 列出目录或者文件的详细信息。比如权限、修改时间等等； </p><p>-a 列出当前目录下所有文件，包括隐藏文件（已点开头的都是隐藏文件）；</p><p>-A 列出除.和..之外的所有文件； </p><p>-h 列出文件的大小； </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /tmp   <span class="hljs-comment"># 显示指定目录/tmp 的内容</span><br><span class="hljs-built_in">ls</span> -l   <span class="hljs-comment"># 列出文件和文件夹的基本属性和详细信息</span><br><br><span class="hljs-built_in">ls</span> -a  <span class="hljs-comment">#列出当前目录的全部内容</span><br><br><span class="hljs-built_in">ls</span> -<span class="hljs-built_in">help</span> <span class="hljs-comment">#列出ls命令的帮助内容</span><br><br><span class="hljs-built_in">ls</span> coco*  <span class="hljs-comment">#列出以coco开头的文件和文件夹</span><br><br>ll  <span class="hljs-comment">#列出文件和文件夹的基本属性和详细信息</span><br></code></pre></td></tr></tbody></table></figure><h2 id="3-列出当前目录的路径pwd"><a href="#3-列出当前目录的路径pwd" class="headerlink" title="3.列出当前目录的路径pwd"></a>3.列出当前目录的路径pwd</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span>  <span class="hljs-comment">#显示当前所在目录的路径</span><br></code></pre></td></tr></tbody></table></figure><h2 id="4-查看当前登录用户who"><a href="#4-查看当前登录用户who" class="headerlink" title="4.查看当前登录用户who"></a>4.查看当前登录用户who</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span> <span class="hljs-comment">#显示当前用户</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">who</span>  <span class="hljs-comment">#显示当前系统登录用户以及所登录的控制台</span><br></code></pre></td></tr></tbody></table></figure><h2 id="5-复制文件或目录-x2F-文件改名cp"><a href="#5-复制文件或目录-x2F-文件改名cp" class="headerlink" title="5.复制文件或目录/文件改名cp"></a>5.复制文件或目录/文件改名cp</h2><p>cp：复制文件或目录；</p><p><strong>常用参数：</strong></p><table><thead><tr><th>-f</th><th>若目标文件已存在，则会直接覆盖原文件</th></tr></thead><tbody><tr><td>-i</td><td>若目标文件已存在，则会询问是否覆盖</td></tr><tr><td>-p</td><td>保留源文件或目录的所有属性</td></tr><tr><td>-r</td><td>递归复制文件和目录</td></tr><tr><td>-b</td><td>覆盖已存在的文件目标前将目标文件备份</td></tr><tr><td>-a</td><td>等价于“dpr”选项</td></tr></tbody></table><p>-f 强制复制，不提示 ；</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> vivi /tmp   <span class="hljs-comment">#复制vivi文件到/tmp 目录下</span><br><br><span class="hljs-built_in">cp</span> /tmp/vivi /home      <span class="hljs-comment">#复制/tmp/vivi 文件到/home 目录下</span><br><br><span class="hljs-built_in">cp</span> -f test1 test2      <span class="hljs-comment"># 将文件test1改名为test2</span><br><br><span class="hljs-built_in">cp</span> -p /tmp/coco /home     <span class="hljs-comment">#复制/tmp/coco到/home目录下并复制文件属性</span><br></code></pre></td></tr></tbody></table></figure><h2 id="6移动文件或目录（改名）mv"><a href="#6移动文件或目录（改名）mv" class="headerlink" title="6移动文件或目录（改名）mv"></a>6移动文件或目录（改名）mv</h2><p>mv：移动文件或目录；</p><p>改名必须满足：目标位置和源位置必须相同才可以，然后文件名必须不同</p><p><strong>常用参数：</strong></p><table><thead><tr><th>-i</th><th>若存在同名文件，则向用户询问是否覆盖</th></tr></thead><tbody><tr><td>-f</td><td>覆盖已有文件时，不进行任何提示</td></tr><tr><td>-b</td><td>当文件存在时，覆盖前为其创建一个备份</td></tr><tr><td>-u</td><td>当源文件比目标文件新，或者目标文件不存在时，才执行移动此操作</td></tr></tbody></table><p><strong>参考实例</strong></p><p>将文件file_1重命名为file_2：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> file_1 file_2<br></code></pre></td></tr></tbody></table></figure><p>将文件file移动到目录dir中 ：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> file /dir<br></code></pre></td></tr></tbody></table></figure><p>将目录dir1移动目录dir2中（前提是目录dir2已存在，若不存在则改名)：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> /dir1 /dir2<br></code></pre></td></tr></tbody></table></figure><p>将目录dir1下的文件移动到当前目录下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> /dir1/* .<br></code></pre></td></tr></tbody></table></figure><h2 id="7-在文件中查找关键词grep"><a href="#7-在文件中查找关键词grep" class="headerlink" title="7.在文件中查找关键词grep"></a>7.在文件中查找关键词grep</h2><p>grep：在文件中查找关键词；</p><p>-v 排除内容  </p><p>-E 可以同时实现两条命令的使用，当然也要加|  </p><p>–color=auto 对过滤的字符串加颜色  </p><p>-i 不区分大小写  </p><p>-w 按单词搜索  </p><p>-B 除了显示匹配的一行之外，并显示该行之前的 N 行  </p><p>-A 除了显示匹配的一行之外，并显示该行之后的 N 行  </p><p>-C 除了显示匹配的一行之外，并显示该行之前后各 N 行  </p><p>-i 不区分大小写  </p><p>-o 只显示匹配到的内容  </p><p>-n 显示行号</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">grep “coco” /etc/test    <span class="hljs-comment">#在/etc/test文件中查找关键字“coco”</span><br></code></pre></td></tr></tbody></table></figure><h2 id="8-查找文件find"><a href="#8-查找文件find" class="headerlink" title="8.查找文件find"></a>8.查找文件find</h2><p>find：查找文件；</p><p>语法：find [路径] -name [选项]</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">find <span class="hljs-built_in">test</span>*    <span class="hljs-comment">#在当前目录下查找以test开头的文件</span><br><br>find /etc/test*     <span class="hljs-comment">#在/etc目录中查找以test开头的文件</span><br><br>find /etc/test* -<span class="hljs-built_in">print</span>     <span class="hljs-comment">#在/etc目录中查找以test开头的文件，并显示出来</span><br></code></pre></td></tr></tbody></table></figure><h2 id="9-查看进程ps"><a href="#9-查看进程ps" class="headerlink" title="9.查看进程ps"></a>9.查看进程ps</h2><p>ps：查看进程；</p><p>a 所有与终端相关的进程； </p><p> x 所有与终端无关的进程； </p><p>u 以用户为中心组织进程状态信息显示； </p><p>o 自定义要显示的字段列表，以逗号分隔； </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">ps -ef    <span class="hljs-comment">#查看进程</span><br>ps -aux &gt; ps.txt   <span class="hljs-comment"># 显示所有进程，并输出到ps.txt文件</span><br><br>ps -ef | grep ssh  <span class="hljs-comment"># 查找特定进程信息</span><br></code></pre></td></tr></tbody></table></figure><h2 id="10-结束进程kill"><a href="#10-结束进程kill" class="headerlink" title="10.结束进程kill"></a>10.结束进程kill</h2><p>kill：结束进程；</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">killall 服务名     <span class="hljs-comment">#关闭服务的所有进程 </span><br><span class="hljs-built_in">kill</span> -9 进程号     <span class="hljs-comment">#强制关闭指定进程</span><br><br>killall -9 服务名   <span class="hljs-comment">#强制关闭服务的所有进程</span><br></code></pre></td></tr></tbody></table></figure><h2 id="11-查看文件内容cat"><a href="#11-查看文件内容cat" class="headerlink" title="11.查看文件内容cat"></a>11.查看文件内容cat</h2><p>cat：查看文件内容；</p><p>-n 显示行号； </p><p> -b 只显示非空行的内容（显示行号）； </p><p> -E 在每行结束处显示$  ；</p><p>-s 压缩空行  ；</p><p>-T 把 tab 键字符显示为^I ；</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/coco     <span class="hljs-comment">#查看/etc/coco文件</span><br><br><span class="hljs-built_in">cat</span> /etc/coco |more     <span class="hljs-comment">#分屏查看文件内容</span><br><br><span class="hljs-built_in">cat</span> /etc/coco |less    <span class="hljs-comment">#分屏查看文件内容，可上下翻页</span><br></code></pre></td></tr></tbody></table></figure><h2 id="12-打包tar"><a href="#12-打包tar" class="headerlink" title="12.打包tar"></a>12.打包tar</h2><p>tar：打包；</p><p>常见的文件类型为.tar.gz  .tar.bz2  .tgz  .tar.zip </p><p>-c：新建打包文件 </p><p>-f：这个参数后面要接文件名，建议 -f 单独写一个参数 </p><p>-t：查看打包文件 </p><p>-z：通过 gzip 的支持进行压缩和解压缩，此时文件名最好为：.tar.gz</p><p>-x：解压缩打包文件 </p><p>-r:  添加文件到已经压缩的文件</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">tar -xzvf test.tar.gz/unzip test.zip      <span class="hljs-comment">#解压文件</span><br><br>tar -czvf test.tar.gz <span class="hljs-built_in">test</span>/zip -r test.zip <span class="hljs-built_in">test</span>     <span class="hljs-comment">#压缩命令</span><br><br>tar -t -f /tmp/etc.tar.gz        <span class="hljs-comment">#查询</span><br></code></pre></td></tr></tbody></table></figure><h2 id="13-查看ip地址ifconfig"><a href="#13-查看ip地址ifconfig" class="headerlink" title="13.查看ip地址ifconfig"></a>13.查看ip地址ifconfig</h2><p>ifconfig:查看ip地址；</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">ifconfig     <span class="hljs-comment">#查看 ip 信息 </span><br><br>ifdown eth0     <span class="hljs-comment">#禁用网卡 </span><br><br>ifup   eth0      <span class="hljs-comment">#启用网卡 </span><br><br>ifconfig eth0 hw ether 00:11:22:33:44:55     <span class="hljs-comment">#修改网卡 eth0 的 MAC 地址</span><br></code></pre></td></tr></tbody></table></figure><h2 id="14-检查网络是否连通ping"><a href="#14-检查网络是否连通ping" class="headerlink" title="14.检查网络是否连通ping"></a>14.检查网络是否连通ping</h2><p>ping:检查网络是否连通；</p><p>-c 指定发送的 ping 包个数  </p><p> -w 指定 ping 命令超时时长  </p><p>-W 一次 ping 操作中，等待对方响应的超时时长  </p><p> -s 指定 ping 包报文大小 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">ping www.baidu.com <br></code></pre></td></tr></tbody></table></figure><h2 id="15-创建文件夹mkdir"><a href="#15-创建文件夹mkdir" class="headerlink" title="15.创建文件夹mkdir"></a>15.创建文件夹mkdir</h2><p>mkdir :创建文件夹；</p><p>-p创建层级目录</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ITester    <span class="hljs-comment">#在当前目录下创建ITester子目录</span><br><br><span class="hljs-built_in">mkdir</span> /tmp/ITester_coco   <span class="hljs-comment">#在指定目录/tmp下创建ITester_coco 子目录</span><br><br><span class="hljs-built_in">mkdir</span> -p coco_2/coco_3   <span class="hljs-comment">#在当前目录下创建2级目录coco_2和其子目录coco_3</span><br><br><span class="hljs-built_in">mkdir</span> coco vivi jojo      <span class="hljs-comment">#在当前目录下创建3个目录 coco vivi jojo(以空格分开)</span><br></code></pre></td></tr></tbody></table></figure><h2 id="16-创建空文本文件touch"><a href="#16-创建空文本文件touch" class="headerlink" title="16.创建空文本文件touch"></a>16.创建空文本文件touch</h2><p>touch：创建空文本文件</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> coco      <span class="hljs-comment">#在当前目录下创建coco文件</span><br><br><span class="hljs-built_in">touch</span> /tmp/vivi     <span class="hljs-comment">#在指定目录/tmp下创建vivi文件</span><br></code></pre></td></tr></tbody></table></figure><h2 id="17-删除rm"><a href="#17-删除rm" class="headerlink" title="17.删除rm"></a>17.删除rm</h2><p>rm：删除；</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf 文件名：删除文件（递归删除，r:递归，f ：强制）<br><br>rmkdir:删除空目录<br><br><span class="hljs-built_in">rm</span> coco_2020    <span class="hljs-comment">#删除coco_2020文件</span><br><br><span class="hljs-built_in">rm</span> -f ITester2020     <span class="hljs-comment">#直接删除ITester2020文件（无需确认）</span><br><br><span class="hljs-built_in">rm</span> -f coco2021 vivi2021 ITester2021     <span class="hljs-comment">#同时删除多个文件（无需确认）</span><br><br><span class="hljs-built_in">rm</span> /tmp/coco     <span class="hljs-comment">#删除指定目录/tmp下的文件coco</span><br><br><br><span class="hljs-built_in">rm</span> co*    <span class="hljs-comment">#删除以co开头的文件</span><br><br><span class="hljs-built_in">rmdir</span>   <span class="hljs-comment">#删除空目录</span><br><br><span class="hljs-built_in">rm</span> -r coco    <span class="hljs-comment">#递归的方式删除非空目录coco</span><br><br><span class="hljs-built_in">rm</span> -rf vivi    <span class="hljs-comment">#直接删除非空目录vivi(不用确认)</span><br></code></pre></td></tr></tbody></table></figure><h2 id="18-创建文件或编辑vi"><a href="#18-创建文件或编辑vi" class="headerlink" title="18.创建文件或编辑vi"></a>18.创建文件或编辑vi</h2><p>vi:创建文件或编辑；</p><p>(i进入编辑模式，退出编辑按ESC，q表示退出；w表示保存退出；q!表示强制退出；输入:不保存退出q!，保存退出 wq)</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">vi coco    <span class="hljs-comment">#编辑coco文件</span><br><br>vi /tmp/vivi     <span class="hljs-comment">#编辑指定目录/tem下的vivi文件</span><br></code></pre></td></tr></tbody></table></figure><p>:w<br>#保存修改</p><p>:q<br>#退出vi编辑器   </p><p>:wq<br>#保存并退出</p><p>:q!<br>#退出vi编辑器，不保存修改</p><h2 id="19-复制文件或目录cp"><a href="#19-复制文件或目录cp" class="headerlink" title="19.复制文件或目录cp"></a>19.复制文件或目录cp</h2><p>cp：复制文件或目录；</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> vivi /tmp     <span class="hljs-comment">#复制vivi文件到/tmp 目录下 </span><br><br><span class="hljs-built_in">cp</span> /tmp/vivi /home     <span class="hljs-comment">#复制/tmp/vivi 文件到/home 目录下</span><br><br><span class="hljs-built_in">cp</span> /home/vivi /tmp/coco      <span class="hljs-comment">#复制/home/vivi 到/tmp 目录下并改名为 coco</span><br><br><span class="hljs-built_in">cp</span> -p /tmp/coco /home     <span class="hljs-comment">#复制/tmp/coco到/home目录下并复制文件属性</span><br></code></pre></td></tr></tbody></table></figure><h2 id="20-移动文件或目录mv"><a href="#20-移动文件或目录mv" class="headerlink" title="20.移动文件或目录mv"></a>20.移动文件或目录mv</h2><p>mv：移动文件或目录；</p><p>改名必须满足：目标位置和源位置必须相同才可以，然后文件名必须不同</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> coco_2020 /tmp   <span class="hljs-comment">#移动coco_2020文件到/tmp 目录下</span><br><br><span class="hljs-built_in">mv</span> /home/coco /tmp      <span class="hljs-comment">#移动/home/coco文件到/tmp目录下</span><br><br><span class="hljs-built_in">mv</span> /home/coco /tmp/ITester      <span class="hljs-comment">#移动/home/coco 文件到/tmp目录下并改名为ITester</span><br><br><span class="hljs-built_in">mv</span> ITester ITester2020        <span class="hljs-comment">#将ITester文件改名为ITester2020</span><br><br><span class="hljs-built_in">mv</span> ITester202003 /tmp     <span class="hljs-comment">#移动目录到/tmp下</span><br><br><span class="hljs-built_in">mv</span> jojo hoho         <span class="hljs-comment">#将jojo目录改名为hoho</span><br></code></pre></td></tr></tbody></table></figure><h2 id="21-查看文件的前几行head"><a href="#21-查看文件的前几行head" class="headerlink" title="21.查看文件的前几行head"></a>21.查看文件的前几行head</h2><p>head:查看文件的前几行</p><p>-n 后面接数字，表示查看前几行（也可以不加， 默认查看 文件前10 行 ） </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">head</span> -5   <span class="hljs-comment">#查看前5行内容</span><br></code></pre></td></tr></tbody></table></figure><h2 id="22-查看文件的后几行-tail"><a href="#22-查看文件的后几行-tail" class="headerlink" title="22.查看文件的后几行 tail"></a>22.查看文件的后几行 tail</h2><p>tail ：查看文件的后几行 </p><p>-n 后面接数字，表示查看几行（也可以不加， 默认查看文件后10 行 ）  </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -5 /etc/passwd    <span class="hljs-comment">#查看后5行内容</span><br></code></pre></td></tr></tbody></table></figure><h2 id="23-查看当前文档内容less"><a href="#23-查看当前文档内容less" class="headerlink" title="23.查看当前文档内容less"></a>23.查看当前文档内容less</h2><p>less ：查看当前文档内容；</p><p>相比 cat，less 可以实现上下翻页等功能 ；</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">less coco.txt   <span class="hljs-comment">#查看coco.txt</span><br></code></pre></td></tr></tbody></table></figure><h2 id="24-分页展示more"><a href="#24-分页展示more" class="headerlink" title="24.分页展示more"></a>24.分页展示more</h2><p>more：分页展示；</p><p>不能回退，灵活上不如 less ；</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">more coco.txt     <span class="hljs-comment">#分页查看coco.txt</span><br></code></pre></td></tr></tbody></table></figure><h2 id="25-更改目录和文件权限值chmod"><a href="#25-更改目录和文件权限值chmod" class="headerlink" title="25.更改目录和文件权限值chmod"></a>25.更改目录和文件权限值chmod</h2><p>chmod：更改目录和文件权限值</p><p>-R 递归改变目录下所有子目录和文件的权限 </p><p>r=4 w=2 x=1 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 766 coco     <span class="hljs-comment">#将目录coco的权限更改为4+2+1 4+2 4+2</span><br><br><span class="hljs-built_in">chmod</span> 777 vivi       <span class="hljs-comment">#将文件vivi的权限更改为 4+2+1 4+2+1 4+2+1</span><br></code></pre></td></tr></tbody></table></figure><h2 id="26-更改文件或目录的属组或属主chown"><a href="#26-更改文件或目录的属组或属主chown" class="headerlink" title="26.更改文件或目录的属组或属主chown"></a>26.更改文件或目录的属组或属主chown</h2><p>chown：更改文件或目录的属组或属主</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> usr coco    <span class="hljs-comment">#将当前目录下的coco目录的属主改为usr</span><br><br><span class="hljs-built_in">chown</span> usr.gur vivi      <span class="hljs-comment">#将当前目录下的vivi目录的属主改为usr，属组改为gur</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
